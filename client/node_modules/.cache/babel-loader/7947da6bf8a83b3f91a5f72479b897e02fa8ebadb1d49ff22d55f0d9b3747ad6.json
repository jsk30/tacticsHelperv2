{"ast":null,"code":"var _jsxFileName = \"D:\\\\jkim0\\\\git proj\\\\tacticshelperv2\\\\tacticsHelperv2\\\\client\\\\src\\\\UseAugmentList.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport axios from \"axios\";\nimport './App.css';\nimport { useState, useEffect } from 'react';\n\n/**\r\n * UseAugmentList component is responsible for fetching and displaying the augment icon\r\n * based on the augment name provided as a prop. It makes an API call to retrieve the\r\n * appropriate icon and displays it.\r\n *\r\n * @component\r\n * @param {string} augName - The name or ID of the augment to display the icon for.\r\n *\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UseAugmentList = ({\n  augName\n}) => {\n  _s();\n  // sets the link to get the augment image\n  const [augLink, setLink] = useState('');\n\n  /**\r\n   * Fetches the image of the augment based on the augment name or ID.\r\n   * Makes an API call to a local server to retrieve the augment's image filename.\r\n   * The image link is then set using `setLink`.\r\n   *\r\n   * @param {string} augID - The ID or name of the augment to get the image for.\r\n   */\n  function getAugment(augID) {\n    axios.get('http://localhost:4000/getAugmentIcon', {\n      params: {\n        augment: augName\n      }\n    }).then(response => {\n      setLink(`https://ddragon.leagueoflegends.com/cdn/14.12.1/img/tft-augment/` + response.data);\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n\n  // Runs the getAugment function once when the component mounts\n  useEffect(() => {\n    getAugment(augName);\n  }, [augName]);\n\n  // Render the augment image\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    className: \"aug_img\",\n    src: augLink,\n    alt: \"\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 10\n  }, this);\n};\n_s(UseAugmentList, \"y6uJtoTgbSZgd9sQBE0iYTDzfPc=\");\n_c = UseAugmentList;\nexport default UseAugmentList;\nvar _c;\n$RefreshReg$(_c, \"UseAugmentList\");","map":{"version":3,"names":["React","axios","useState","useEffect","jsxDEV","_jsxDEV","UseAugmentList","augName","_s","augLink","setLink","getAugment","augID","get","params","augment","then","response","data","catch","error","console","className","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/jkim0/git proj/tacticshelperv2/tacticsHelperv2/client/src/UseAugmentList.jsx"],"sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport './App.css';\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\n/**\r\n * UseAugmentList component is responsible for fetching and displaying the augment icon\r\n * based on the augment name provided as a prop. It makes an API call to retrieve the\r\n * appropriate icon and displays it.\r\n *\r\n * @component\r\n * @param {string} augName - The name or ID of the augment to display the icon for.\r\n *\r\n */\r\nconst UseAugmentList = ({ augName }) => {\r\n  // sets the link to get the augment image\r\n  const [augLink, setLink] = useState('');\r\n\r\n  /**\r\n   * Fetches the image of the augment based on the augment name or ID.\r\n   * Makes an API call to a local server to retrieve the augment's image filename.\r\n   * The image link is then set using `setLink`.\r\n   *\r\n   * @param {string} augID - The ID or name of the augment to get the image for.\r\n   */\r\n  function getAugment(augID) {\r\n    axios\r\n      .get('http://localhost:4000/getAugmentIcon', { params: { augment: augName } })\r\n      .then((response) => {\r\n        setLink(`https://ddragon.leagueoflegends.com/cdn/14.12.1/img/tft-augment/` + response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }\r\n\r\n  // Runs the getAugment function once when the component mounts\r\n  useEffect(() => {\r\n    getAugment(augName);\r\n  }, [augName]);\r\n\r\n  // Render the augment image\r\n  return <img className=\"aug_img\" src={augLink} alt=\"\" />;\r\n};\r\n\r\nexport default UseAugmentList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,WAAW;AAElB,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA,SAAAC,MAAA,IAAAC,OAAA;AASA,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACtC;EACA,MAAM,CAACC,OAAO,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAEvC;AACF;AACA;AACA;AACA;AACA;AACA;EACE,SAASS,UAAUA,CAACC,KAAK,EAAE;IACzBX,KAAK,CACFY,GAAG,CAAC,sCAAsC,EAAE;MAAEC,MAAM,EAAE;QAAEC,OAAO,EAAER;MAAQ;IAAE,CAAC,CAAC,CAC7ES,IAAI,CAAEC,QAAQ,IAAK;MAClBP,OAAO,CAAC,kEAAkE,GAAGO,QAAQ,CAACC,IAAI,CAAC;IAC7F,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CAAC;EACN;;EAEA;EACAjB,SAAS,CAAC,MAAM;IACdQ,UAAU,CAACJ,OAAO,CAAC;EACrB,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;;EAEb;EACA,oBAAOF,OAAA;IAAKiB,SAAS,EAAC,SAAS;IAACC,GAAG,EAAEd,OAAQ;IAACe,GAAG,EAAC;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACzD,CAAC;AAACpB,EAAA,CA7BIF,cAAc;AAAAuB,EAAA,GAAdvB,cAAc;AA+BpB,eAAeA,cAAc;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}