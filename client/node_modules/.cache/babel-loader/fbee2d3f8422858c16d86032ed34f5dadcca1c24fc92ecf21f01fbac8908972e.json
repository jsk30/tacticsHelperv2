{"ast":null,"code":"var _jsxFileName = \"D:\\\\jkim0\\\\git proj\\\\tacticshelperv2\\\\tacticsHelperv2\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport UseMatchCard from './UseMatchCard';\nimport { Chart as ChartJS } from \"chart.js/auto\";\nimport { Bar, Doughnut, Line } from \"react-chartjs-2\";\n\n// Main App Component\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Declare state variables using useState Hook\n  const [searchID, setID] = useState(\"\"); // State to store the user’s input (Riot ID and Tagline)\n  const [matchHistory, setmatchHistory] = useState([]); // State to store match history data from API\n  const [myPUUID, setPUUID] = useState(\"\"); // State to store the user’s PUUID (Player Unique Identifier)\n\n  // Function to fetch match history from the server (calls a backend endpoint to get data)\n  function getGames(event) {\n    axios.get(\"http://localhost:4000/past20Games\", {\n      params: {\n        username: searchID\n      }\n    }) // Send GET request to backend\n    .then(function (response) {\n      setmatchHistory(response.data); // Set match history state with response data from the server\n    }).catch(function (error) {\n      console.log(error); // Log any errors that occur during the request\n    });\n  }\n\n  // Function to fetch the player's PUUID from the server (calls a backend endpoint to get data)\n  function getPUUID(event) {\n    axios.get(\"http://localhost:4000/getPUUID\", {\n      params: {\n        username: searchID\n      }\n    }) // Send GET request to backend\n    .then(function (response) {\n      setPUUID(response.data); // Set PUUID state with response data from the server\n    }).catch(function (error) {\n      console.log(error); // Log any errors that occur during the request\n    });\n  }\n\n  // Output the match history to the console (for debugging purposes)\n  console.log(matchHistory);\n\n  // JSX - User Interface of the component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setID(e.target.value) // Update state with the user's input\n        ,\n        placeholder: \"Enter RiotID#Tagline\" // Placeholder text in the input field\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          getGames(); // Trigger the getGames function to fetch match data\n          getPUUID(); // Trigger the getPUUID function to fetch PUUID data\n        },\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), matchHistory.length !== 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"matchGraph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), matchHistory.map((gameData, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: gameData.info.participants.map((pInfo, pIndex) => pInfo.puuid === myPUUID ? /*#__PURE__*/_jsxDEV(UseMatchCard, {\n          index: index // Pass match index to UseMatchCard component\n          ,\n          info: pInfo // Pass participant info to UseMatchCard component\n          ,\n          companion: pInfo.companion.item_ID // Pass companion item ID to UseMatchCard component\n        }, pIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 19\n        }, this) : null)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true) :\n    /*#__PURE__*/\n    /* Display message if no match history is found */\n    _jsxDEV(\"p\", {\n      children: \"Summoner does not exist or no data on Summoner was found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"3qU92X9Y4+YO1eemulvpL0Qz4BE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","axios","UseMatchCard","Chart","ChartJS","Bar","Doughnut","Line","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","searchID","setID","matchHistory","setmatchHistory","myPUUID","setPUUID","getGames","event","get","params","username","then","response","data","catch","error","console","log","getPUUID","className","children","onChange","e","target","value","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","map","gameData","index","info","participants","pInfo","pIndex","puuid","companion","item_ID","_c","$RefreshReg$"],"sources":["D:/jkim0/git proj/tacticshelperv2/tacticsHelperv2/client/src/App.js"],"sourcesContent":["import { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\nimport UseMatchCard from './UseMatchCard';\r\nimport { Chart as ChartJS } from \"chart.js/auto\";\r\nimport { Bar, Doughnut, Line } from \"react-chartjs-2\";\r\n\r\n\r\n\r\n// Main App Component\r\nfunction App() {\r\n  // Declare state variables using useState Hook\r\n  const [searchID, setID] = useState(\"\"); // State to store the user’s input (Riot ID and Tagline)\r\n  const [matchHistory, setmatchHistory] = useState([]); // State to store match history data from API\r\n  const [myPUUID, setPUUID] = useState(\"\"); // State to store the user’s PUUID (Player Unique Identifier)\r\n\r\n  // Function to fetch match history from the server (calls a backend endpoint to get data)\r\n  function getGames(event) {\r\n    axios.get(\"http://localhost:4000/past20Games\", { params: { username: searchID } }) // Send GET request to backend\r\n      .then(function (response) {\r\n        setmatchHistory(response.data); // Set match history state with response data from the server\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error); // Log any errors that occur during the request\r\n      });\r\n  }\r\n\r\n  // Function to fetch the player's PUUID from the server (calls a backend endpoint to get data)\r\n  function getPUUID(event) {\r\n    axios.get(\"http://localhost:4000/getPUUID\", { params: { username: searchID } }) // Send GET request to backend\r\n      .then(function (response) {\r\n        setPUUID(response.data); // Set PUUID state with response data from the server\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error); // Log any errors that occur during the request\r\n      });\r\n  }\r\n\r\n  // Output the match history to the console (for debugging purposes)\r\n  console.log(matchHistory);\r\n\r\n  // JSX - User Interface of the component\r\n  return (\r\n    <div className=\"App\">\r\n      \r\n      {/* Input field for user to enter their Riot ID and Tagline */}\r\n      <div className='search'>\r\n        <input \r\n          onChange={e => setID(e.target.value)} // Update state with the user's input\r\n          placeholder=\"Enter RiotID#Tagline\" // Placeholder text in the input field\r\n        />\r\n        <button \r\n          onClick={() => {\r\n            getGames(); // Trigger the getGames function to fetch match data\r\n            getPUUID(); // Trigger the getPUUID function to fetch PUUID data\r\n          }}>\r\n          Search\r\n        </button>\r\n      </div>\r\n\r\n      {/* Conditionally render match data if available */}\r\n      {matchHistory.length !== 0 ? (\r\n        <>\r\n          <div className='matchGraph'>\r\n            {/* Placeholder for potential chart/graph visualization */}\r\n          </div>\r\n\r\n          {/* Loop through matchHistory to display individual matches */}\r\n          {matchHistory.map((gameData, index) => (\r\n            <div key={index}>\r\n              {/* Loop through participants in each match to find the current user (based on PUUID) */}\r\n              {gameData.info.participants.map((pInfo, pIndex) =>\r\n                pInfo.puuid === myPUUID ? (\r\n                  <UseMatchCard \r\n                    key={pIndex} \r\n                    index={index} // Pass match index to UseMatchCard component\r\n                    info={pInfo} // Pass participant info to UseMatchCard component\r\n                    companion={pInfo.companion.item_ID} // Pass companion item ID to UseMatchCard component\r\n                  />\r\n                ) : null\r\n              )}\r\n            </div>\r\n          ))}\r\n        </>\r\n      ) : (\r\n        /* Display message if no match history is found */\r\n        <p>Summoner does not exist or no data on Summoner was found.</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}