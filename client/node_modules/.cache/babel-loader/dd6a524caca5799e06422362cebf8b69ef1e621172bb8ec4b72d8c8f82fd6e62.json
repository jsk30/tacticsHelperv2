{"ast":null,"code":"var _jsxFileName = \"D:\\\\jkim0\\\\git proj\\\\tacticshelperv2\\\\tacticsHelperv2\\\\client\\\\src\\\\UseTraitsList.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n/**\r\n * UseTraitsList component is responsible for fetching and displaying the trait icon\r\n * based on the trait name provided as a prop. It makes an API call to retrieve the\r\n * appropriate icon and displays it.\r\n *\r\n * @component\r\n * @param {string} traitName - The name or ID of the trait to display the icon for.\r\n *\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UseTraitsList = ({\n  traitName\n}) => {\n  _s();\n  // sets the link to get the trait image\n  const [traitLink, setLink] = useState('');\n\n  /**\r\n   * Fetches the image of the trait based on the trait name or ID.\r\n   * Makes an API call to a local server to retrieve the trait's image filename.\r\n   * The image link is then set using `setLink`.\r\n   *\r\n   * @param {string} traitID - The ID or name of the trait to get the image for.\r\n   */\n  function getTrait(traitID) {\n    axios.get('http://localhost:4000/getTraitIcon', {\n      params: {\n        trait: traitName\n      }\n    }).then(response => {\n      setLink(`https://ddragon.leagueoflegends.com/cdn/14.12.1/img/tft-trait/` + response.data);\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n\n  // Runs the getTrait function once when the component mounts\n  useEffect(() => {\n    getTrait(traitName);\n  }, [traitName]);\n\n  // Render the trait image\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    src: traitLink,\n    alt: \"\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 10\n  }, this);\n};\n_s(UseTraitsList, \"HdyDjylsj8qspQeig2BqRJDb5k0=\");\n_c = UseTraitsList;\nexport default UseTraitsList;\nvar _c;\n$RefreshReg$(_c, \"UseTraitsList\");","map":{"version":3,"names":["useState","useEffect","axios","jsxDEV","_jsxDEV","UseTraitsList","traitName","_s","traitLink","setLink","getTrait","traitID","get","params","trait","then","response","data","catch","error","console","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/jkim0/git proj/tacticshelperv2/tacticsHelperv2/client/src/UseTraitsList.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n/**\r\n * UseTraitsList component is responsible for fetching and displaying the trait icon\r\n * based on the trait name provided as a prop. It makes an API call to retrieve the\r\n * appropriate icon and displays it.\r\n *\r\n * @component\r\n * @param {string} traitName - The name or ID of the trait to display the icon for.\r\n *\r\n */\r\nconst UseTraitsList = ({ traitName }) => {\r\n  // sets the link to get the trait image\r\n  const [traitLink, setLink] = useState('');\r\n\r\n  /**\r\n   * Fetches the image of the trait based on the trait name or ID.\r\n   * Makes an API call to a local server to retrieve the trait's image filename.\r\n   * The image link is then set using `setLink`.\r\n   *\r\n   * @param {string} traitID - The ID or name of the trait to get the image for.\r\n   */\r\n  function getTrait(traitID) {\r\n    axios\r\n      .get('http://localhost:4000/getTraitIcon', { params: { trait: traitName } })\r\n      .then((response) => {\r\n        setLink(`https://ddragon.leagueoflegends.com/cdn/14.12.1/img/tft-trait/` + response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }\r\n\r\n  // Runs the getTrait function once when the component mounts\r\n  useEffect(() => {\r\n    getTrait(traitName);\r\n  }, [traitName]);\r\n\r\n  // Render the trait image\r\n  return <img src={traitLink} alt=\"\" />;\r\n};\r\n\r\nexport default UseTraitsList;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA,SAAAC,MAAA,IAAAC,OAAA;AASA,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EACvC;EACA,MAAM,CAACC,SAAS,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAEzC;AACF;AACA;AACA;AACA;AACA;AACA;EACE,SAASU,QAAQA,CAACC,OAAO,EAAE;IACzBT,KAAK,CACFU,GAAG,CAAC,oCAAoC,EAAE;MAAEC,MAAM,EAAE;QAAEC,KAAK,EAAER;MAAU;IAAE,CAAC,CAAC,CAC3ES,IAAI,CAAEC,QAAQ,IAAK;MAClBP,OAAO,CAAC,gEAAgE,GAAGO,QAAQ,CAACC,IAAI,CAAC;IAC3F,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CAAC;EACN;;EAEA;EACAlB,SAAS,CAAC,MAAM;IACdS,QAAQ,CAACJ,SAAS,CAAC;EACrB,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;;EAEf;EACA,oBAAOF,OAAA;IAAKiB,GAAG,EAAEb,SAAU;IAACc,GAAG,EAAC;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACvC,CAAC;AAACnB,EAAA,CA7BIF,aAAa;AAAAsB,EAAA,GAAbtB,aAAa;AA+BnB,eAAeA,aAAa;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}